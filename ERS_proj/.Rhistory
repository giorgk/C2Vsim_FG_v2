KXY[,1+i] <- Ktemp$ID[seq(from = 1, to = 30179*4, by = 4)+i]
KZ[,1+i] <- Ktemp$PV[seq(from = 1, to = 30179*4, by = 4)+i]
}
# load the required library
library(h5)
library(pracma)
# Define the paths
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(preproc_path, "C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
NlinesSkip <- 105
strat <- read.table(file = paste0(preproc_path, "C2VSimFG_Stratigraphy.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "GSE", "A1", "L1", "A2", "L2", "A3", "L3", "A4", "L4"))
View(strat)
NlinesSkip <- 105
strat <- read.table(file = paste0(preproc_path, "C2VSimFG_Stratigraphy.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "GSE", "A1", "L1", "A2", "L2", "A3", "L3", "A4", "L4"))
# Convert feet to meter
strat[-1] <- strat[-1] * 0.3048
for(i in 1:4){
strat[[ paste0("L", as.character(i))]] <- strat[[ paste0("L", as.character(i))]] + strat[[ paste0("A", as.character(i))]]
}
strat$A1 <- NULL
strat$A2 <- NULL
strat$A3 <- NULL
strat$A4 <- NULL
strat$L1 = strat$GSE - strat$L1
strat$L2 = strat$L1 - strat$L2
strat$L3 = strat$L2 - strat$L3
strat$L4 = strat$L3 - strat$L4
NlinesSkip <- 142
nNodes <- 32537
MSH <- read.table(file = paste0(preproc_path, "C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
elemArea <- vector(mode = "numeric", length = length(MSH[[1]]))
print("Calculate element areas...")
for (i in 1:length(MSH[[1]])){
x <- XY$X[as.integer(c(MSH[i,2:5]))]
y <- XY$Y[as.integer(c(MSH[i,2:5]))]
elemArea[i] <- polyarea(x,y)
}
View(elemArea)
sum(elemArea)
sum(elemArea)/(1000*1000)
print("Central Valley area")
print("Central Valley area", i)
print("Central Valley area" + i)
print("Central Valley area" + as.character(1))
print("Central Valley area" , as.character(1))
print(paste("Central Valley area" , as.character(1))
)
print(paste("Central Valley area" , as.character(1)), 3)
print(paste("Central Valley area" , as.character(1)), as.character(3))
print(paste("Central Valley area" , as.character(1))
}
print(paste("Central Valley area" , as.character(sum(elemArea)/(1000*1000))))
library(raster)
library(rgeos)
library(sp)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(rgdal)
install.packages("sp")
library(sp)
library(raster)
library(rgeos)
library(rgdal)
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
## Saturated Hydraulic properties
NlinesSkip <- 455
nNodes <- 30179*4
Ktemp <- read.table(file = paste0(c2vsim_path, "Simulation/Groundwater/C2VSimFG_Groundwater1974.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "PKH", "PS", "PN", "PV", "PL"))
KXY <- matrix(data = NA, nrow = 30179, ncol = 4)
KZ <- matrix(data = NA, nrow = 30179, ncol = 4)
KXY[,1] <- Ktemp$PKH[seq(from = 1, to = 30179*4, by = 4)]
KZ[,1] <- Ktemp$PL[seq(from = 1, to = 30179*4, by = 4)]
for (i in 1:3) {
KXY[,1+i] <- Ktemp$ID[seq(from = 1, to = 30179*4, by = 4)+i]
KZ[,1+i] <- Ktemp$PV[seq(from = 1, to = 30179*4, by = 4)+i]
}
View(KXY)
library(pracma)
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(preproc_path, "C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
dim(KXY)
dim(XY)
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
## Saturated Hydraulic properties
NlinesSkip <- 455
nNodes <- 30179*4
Ktemp <- read.table(file = paste0(c2vsim_path, "Simulation/Groundwater/C2VSimFG_Groundwater1974.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "PKH", "PS", "PN", "PV", "PL"))
# KXY and KZ are the matrices with the horizontal and vertical hydrulic conductivity values [Nnodes x Nlayers]
KXY <- matrix(data = NA, nrow = 30179, ncol = 4)
KZ <- matrix(data = NA, nrow = 30179, ncol = 4)
KXY[,1] <- Ktemp$PKH[seq(from = 1, to = 30179*4, by = 4)]
KZ[,1] <- Ktemp$PL[seq(from = 1, to = 30179*4, by = 4)]
for (i in 1:3) {
KXY[,1+i] <- Ktemp$ID[seq(from = 1, to = 30179*4, by = 4)+i]
KZ[,1+i] <- Ktemp$PV[seq(from = 1, to = 30179*4, by = 4)+i]
}
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
View(Ktemp)
1:3:10
Ktemp[seq(from = 1, to = 30179*4, by = 4),]
KKtemp <- Ktemp[seq(from = 1, to = 30179*4, by = 4),]
View(KKtemp)
S <- SpatialPointsDataFrame(coords = XY, data = Ktemp[seq(from = 1, to = 30179*4, by = 4),])
View(S)
getwd()
writeOGR(obj = S, dsn = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/gis_data", layer = "Klay1", driver = "ESRI Shapefile")
library(sp)
library(raster)
library(rgeos)
library(rgdal)
writeOGR(obj = S, dsn = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/gis_data", layer = "Klay1", driver = "ESRI Shapefile")
View(XY)
XY[,2:3]
XY[,1:3]
XY[,2:3]
S <- SpatialPointsDataFrame(coords = XY[,2:3], data = Ktemp[seq(from = 1, to = 30179*4, by = 4),])
writeOGR(obj = S, dsn = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/gis_data", layer = "Klay1", driver = "ESRI Shapefile")
writeOGR(obj = S, dsn = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/gis_data", layer = "Klay1", driver = "ESRI Shapefile")
c2vsim_path <-"f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
XY <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = 90, nrows = 30179,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
MSH <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = 142, nrows = 32537,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
strat <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Stratigraphy.dat"),
header = FALSE, sep = "", skip = 105, nrows = 30179,
quote = "",fill = TRUE,
col.names = c("ID", "GSE", "A1", "L1", "A2", "L2", "A3", "L3", "A4", "L4"))
HEAD <- read.table(file = paste0(c2vsim_path, "Results/C2VSimFG_GW_HeadAll.out"),
header = FALSE, sep = "", skip = 6, nrows = 30179*4,fill = TRUE, comment.char="",
stringsAsFactors=FALSE)
dim(HEAD)
View(HEAD)
View(HEAD)
HEAD[1,1]
HEAD[1,2]
HEAD[1,3]
HEAD[1,1]
tmp <- HEAD[1,]
View(tmp)
length(tmp)
504*4
2020/4
1:4:10
id <- seq(from = 1, to = 505, by = 4)
Lay1_id <- seq(from = 1, to = 505, by = 4)
View(Lay1_id)
Lay1_id <- seq(from = 1, to = 505*4, by = 4)
Lay1_id <- seq(from = 1, to = 505*4, by = 4)
Lay1_HEAD <- HEAD[Lay1_id,]
View(Lay1_HEAD)
View(Lay1_HEAD[,1])
494:505
length(494:505)
LastYearHEAD <- Lay1_HEAD[494:505,]
View(LastYearHEAD)
LastYearHEADAv <- apply(LastYearHEAD,1,mean)
LastYearHEADAv <- apply(LastYearHEAD[-1,],2,mean)
LastYearHEAD[1,]
LastYearHEAD[,1]
LastYearHEAD[1,1]
LastYearHEAD[1,2]
tmp<-LastYearHEAD[-1,]
tmp<-LastYearHEAD[,-1]
View(tmp)
LastYearHEAD <- LastYearHEAD[,-1]
LastYearHEADAv <- apply(LastYearHEAD,2,mean)
View(LastYearHEADAv)
DGW2015 <- strat$GSE - LastYearHEADAv
View(DGW2015)
DGW2015 <- (strat$GSE - LastYearHEADAv)*0.3048
getwd()
save(DGW2015, file = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/DGW2015.Rdata")
load(file = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/DGW2015.Rdata")
script_path = "F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/"
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
# Kings elements subregions are defined in a spreadsheet
Kings <- read.csv(file = paste0(script_path, "KingsSubregions.csv"))
subreg_list <- factor(Kings$Subregion)
MSH <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = 142, nrows = 32537,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
i<-1
el_ids <- which(Kings$Subregion == levels(subreg_list)[i], arr.ind = FALSE)
subRegNodes <- MSH[Kings$ElementID[el_ids],2:5]
View(subRegNodes)
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
subRegNodes <- subRegNodes[-i_zero]
View(DGW2015)
View(DGW2015[subRegNodes])
tmp <- mean(DGW2015[subRegNodes])
AvDGW <- vector(mode = numeric,length = length(levels(subreg_list)))
AvDGW <- vector(mode = "numeric",length = length(levels(subreg_list)))
for (i in 1:length(levels(subreg_list))){
el_ids <- which(Kings$Subregion == levels(subreg_list)[i], arr.ind = FALSE)
subRegNodes <- MSH[Kings$ElementID[el_ids],2:5]
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
subRegNodes <- subRegNodes[-i_zero]
AvDGW[i] <- mean(DGW2015[subRegNodes])
}
View(AvDGW)
i<-10
el_ids <- which(Kings$Subregion == levels(subreg_list)[i], arr.ind = FALSE)
subRegNodes <- MSH[Kings$ElementID[el_ids],2:5]
View(subRegNodes)
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
subRegNodes <- subRegNodes[-i_zero]
is.empty(i_zero)
is.null(i_zero)
is.empty.model(i_zero)
length(i_zero)
AvDGW <- vector(mode = "numeric",length = length(levels(subreg_list)))
for (i in 1:length(levels(subreg_list))){
el_ids <- which(Kings$Subregion == levels(subreg_list)[i], arr.ind = FALSE)
subRegNodes <- MSH[Kings$ElementID[el_ids],2:5]
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
if (length(i_zero) > 0)
subRegNodes <- subRegNodes[-i_zero]
AvDGW[i] <- mean(DGW2015[subRegNodes])
}
View(levels(subreg_list))
# Convert to dataframe and write to excel
dgw_df <- data.frame(AvDGW, row.names = levels(subreg_list))
View(dgw_df)
colnames(dgw_df)
names(dgw_df)[names(dgw_df) == "AvDGW"] <- "DGW2015"
library(xlsx)
write.xlsx(x = dgw_df, file = "Depth2GW_2015.xlsx", sheetName = "Kings", append = FALSE)
write.xlsx(x = dgw_df, file = paste0(script_path,"Depth2GW_2015.xlsx"), sheetName = "Kings", append = FALSE)
clear()
clear()
library(pracma)
clear()
library(pracma)
library(xlsx)
library(sf)
load(file = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/DGW2015.Rdata")
script_path = "F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/"
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
# Read the Kern subregions
kern <- read_sf(paste0(script_path, "gis_data/Kern_only.shp"))
kern_geom <- st_geometry(kern)
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(preproc_path, "C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
NlinesSkip <- 142
nNodes <- 32537
MSH <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
quad_el <- which(MSH$nd4 != 0, arr.ind = FALSE)
tri_el <- which(MSH$nd4 == 0, arr.ind = FALSE)
cc <- matrix(data = 0, nrow = dim(MSH)[1], ncol = 2)
cc[quad_el,1] <- (XY$X[MSH$nd1[quad_el]] + XY$X[MSH$nd2[quad_el]] + XY$X[MSH$nd3[quad_el]] + XY$X[MSH$nd4[quad_el]])/4
cc[quad_el,2] <- (XY$Y[MSH$nd1[quad_el]] + XY$Y[MSH$nd2[quad_el]] + XY$Y[MSH$nd3[quad_el]] + XY$Y[MSH$nd4[quad_el]])/4
cc[tri_el,1] <- (XY$X[MSH$nd1[tri_el]] + XY$X[MSH$nd2[tri_el]] + XY$X[MSH$nd3[tri_el]])/3
cc[tri_el,2] <- (XY$Y[MSH$nd1[tri_el]] + XY$Y[MSH$nd2[tri_el]] + XY$Y[MSH$nd3[tri_el]])/3
# for each subregion find the mesh element ids
kern_elems <- vector("list", dim(kern)[1])
for (i in 1:dim(kern)[1]) {
kern_elems[[i]] <- which(inpolygon(cc[,1], cc[,2], kern_geom[[i]][[1]][[1]][,1], kern_geom[[i]][[1]][[1]][,2]) == TRUE, arr.ind = FALSE)
}
View(kern$KernDistri)
AvDGW <- vector(mode = "numeric",length = dim(kern)[1])
for (i in 1:dim(kern)[1]) {
el_ids <- kern_elems[[j]]
subRegNodes <- MSH[el_ids,2:5]
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
if (length(i_zero) > 0)
subRegNodes <- subRegNodes[-i_zero]
AvDGW[i] <- mean(DGW2015[subRegNodes])
}
i<-1
el_ids <- kern_elems[[i]]
subRegNodes <- MSH[el_ids,2:5]
View(subRegNodes)
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
length(i_zero) > 0
subRegNodes <- subRegNodes[-i_zero]
AvDGW[i] <- mean(DGW2015[subRegNodes])
AvDGW <- vector(mode = "numeric",length = dim(kern)[1])
for (i in 1:dim(kern)[1]) {
el_ids <- kern_elems[[i]]
subRegNodes <- MSH[el_ids,2:5]
tmpnds <- as.vector(t(subRegNodes))
subRegNodes <- unique(tmpnds)
i_zero <- which(subRegNodes == 0)
if (length(i_zero) > 0)
subRegNodes <- subRegNodes[-i_zero]
AvDGW[i] <- mean(DGW2015[subRegNodes])
}
View(AvDGW)
dgw_df <- data.frame(AvDGW, row.names = kern$KernDistri)
names(dgw_df)[names(dgw_df) == "AvDGW"] <- "DGW2015"
write.xlsx(x = dgw_df, file = paste0(script_path,"Depth2GW_2015.xlsx"), sheetName = "Kern", append = FALSE)
clear()
source('F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/KingsDGW.R', echo=TRUE)
clear()
source('F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/KernDGW.R', echo=TRUE)
write.xlsx(x = dgw_df, file = paste0(script_path,"Depth2GW_2015.xlsx"), sheetName = "Kern", append = TRUE)
matrix(data = 1:9, nrow = 3,ncol = 3)
solve(matrix(data = 1:9, nrow = 3,ncol = 3))
matrix(data = 1:9, nrow = 3,ncol = 3,byrow = TRUE)
solve(matrix(data = 1:9, nrow = 3,ncol = 3,byrow = TRUE))
matrix(data = 0,nrow = 4, ncol = 3)
Q1 <- matrix(data = 0,nrow = 4, ncol = 3)
View(Q1)
5.0115    0.7143
0.3571    2.6676
6.0253    9.3440
8.2834    3.8047
c(5.0115	0.7143
0.3571	2.6676
6.0253	9.344
8.2834	3.8047
)
Xo <- c(5.0115,  0.3571, 6.0253, 8.2834)
Yo <- c(0.7143,  2.6676, 9.3440, 3.8047)
Zo <- c(1,1,1,1)
c(Xo,Yo,Zo)
matrix(data = c(Xo,Yo,Zo), nrow=4)
Xd <- c(0,  0, 1, 1)
Yd <- c(0,  1, 1, 0)
Zd <- c(1,1,1,1)
Xdmat <- matrix(data = c(Xo,Yo,Zo), nrow=4)
XL <- matrix(data = 0, nrow = 8, ncol = 8)
View(XL)
XL[1:4,1:3] <- Xomat
Xomat <- matrix(data = c(Xo,Yo,Zo), nrow=4)
XL[1:4,1:3] <- Xomat
XL[5:8,4:6] <- Xdmat
Xo*xd
Xo*Xd
-Xo*Xd
XL[1:4,7] <- -Xo*Xd
View(Xdmat)
Xo <- c(5.0115,  0.3571, 6.0253, 8.2834)
Yo <- c(0.7143,  2.6676, 9.3440, 3.8047)
Zo <- c(1,1,1,1)
Xomat <- matrix(data = c(Xo,Yo,Zo), nrow=4)
View(Xomat)
Xd <- c(0,  0, 1, 1)
Yd <- c(0,  1, 1, 0)
Zd <- c(1,1,1,1)
Xdmat <- matrix(data = c(Xd,Yd,Zd), nrow=4)
XL[1:4,7] <- -Xomat[,1]*Xdmat[,1]
XL[5:8,4:6] <- Xdmat
XL[1:4,1:3] <- Xomat
XL[5:8,4:6] <- Xomat
XL[1:4,8] <- -Xomat[,2]*Xdmat[,1]
XL[5:8,8] <- -Xomat[,2]*Xdmat[,2]
c(Xd,Yd)
solve(XL,c(Xd,Yd))
cc <- solve(XL,c(Xd,Yd))
htransf <- function(x,y,cf){
xp <- (cf[1]*x+cf[2]*y+cf[3])/(cf[7]*x+cf[8]*y+1)
yp <- (cf[4]*x+cf[5]*y+cf[6])/(cf[7]*x+cf[8]*y+1)
return(c(xp,yp))
}
tst <- htransf(0.9643,2.8134,cc)
tst <- htransf(4.9666,    4.2711,cc)
View(XL)
-Xomat[,1]*Xdmat[,2]
XL[1:4,1:3] <- Xomat
XL[5:8,4:6] <- Xomat
XL[1:4,7] <- -Xomat[,1]*Xdmat[,1]
XL[5:8,7] <- -Xomat[,1]*Xdmat[,2]
XL[1:4,8] <- -Xomat[,2]*Xdmat[,1]
XL[5:8,8] <- -Xomat[,2]*Xdmat[,2]
cc <- solve(XL,c(Xd,Yd))
tst <- htransf(4.9666,    4.2711,cc)
tst <- htransf(0.9643,    2.7843,cc)
exit
q()
debugSource('F:/UCDAVIS/IWFM_track/Rwrkspc/iwfm_funct.R', echo=TRUE)
po <- iwfm.options()
po$RBFSTD$XY
library(h5)
library(sf)
library(pracma)
library(xlsx)
# Paths
script_path = "F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/"
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
setwd(script_path)
NtimeSteps <- 504
Nyears <- NtimeSteps/12
# Read the Kern subregions
kern <- read_sf(paste0(script_path, "gis_data/Kern_only.shp"))
kern_geom <- st_geometry(kern)
# Read the mesh elements and node coordinates
NlinesSkip <- 90
nNodes <- 30179
XY <- read.table(file = paste0(preproc_path, "C2VSimFG_Nodes.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "X", "Y"))
NlinesSkip <- 142
nNodes <- 32537
MSH <- read.table(file = paste0(preproc_path, "C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = NlinesSkip, nrows = nNodes,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
quad_el <- which(MSH$nd4 != 0, arr.ind = FALSE)
tri_el <- which(MSH$nd4 == 0, arr.ind = FALSE)
cc <- matrix(data = 0, nrow = dim(MSH)[1], ncol = 2)
cc[quad_el,1] <- (XY$X[MSH$nd1[quad_el]] + XY$X[MSH$nd2[quad_el]] + XY$X[MSH$nd3[quad_el]] + XY$X[MSH$nd4[quad_el]])/4
cc[quad_el,2] <- (XY$Y[MSH$nd1[quad_el]] + XY$Y[MSH$nd2[quad_el]] + XY$Y[MSH$nd3[quad_el]] + XY$Y[MSH$nd4[quad_el]])/4
cc[tri_el,1] <- (XY$X[MSH$nd1[tri_el]] + XY$X[MSH$nd2[tri_el]] + XY$X[MSH$nd3[tri_el]])/3
cc[tri_el,2] <- (XY$Y[MSH$nd1[tri_el]] + XY$Y[MSH$nd2[tri_el]] + XY$Y[MSH$nd3[tri_el]])/3
# for each subregion find the mesh element ids
kern_elems <- vector("list", dim(kern)[1])
for (i in 1:dim(kern)[1]) {
kern_elems[[i]] <- which(inpolygon(cc[,1], cc[,2], kern_geom[[i]][[1]][[1]][,1], kern_geom[[i]][[1]][[1]][,2]) == TRUE, arr.ind = FALSE)
}
LWU_BDGinfo <- h5file(name =  paste0(results_path, "C2VSimFG_L&WU_ZBudget.hdf"), mode = "r")
hfileGroups <- list.groups(LWU_BDGinfo)
hfileDataSets <- list.datasets(LWU_BDGinfo)
# Read data and aggregate per Kern region
data_ids <- 15:53
#agg_data <- matrix(data = NA, nrow = dim(kern)[1], ncol = length(data_ids))
agg_vec <- array(data = NA, dim = c(Nyears, length(data_ids), dim(kern)[1] ))
clear()
source("KernDataLWU.R")
#write.csv(agg_df, file = paste0(script_path, "KingsLWU.csv"))
agg_data <- matrix(data = NA, nrow = Nyears, ncol = length(data_ids))
clear()
source("KingsDataLWU.R")
clear()
library(pracma)
library(xlsx)
load(file = "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/DGW2015.Rdata")
script_path = "F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/ERS_proj/"
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
# Kings elements subregions are defined in a spreadsheet
Kings <- read.csv(file = paste0(script_path, "KingsSubregions.csv"))
subreg_list <- factor(Kings$Subregion)
MSH <- read.table(file = paste0(c2vsim_path, "Preprocessor/C2VSimFG_Elements.dat"),
header = FALSE, sep = "", skip = 142, nrows = 32537,
quote = "",fill = TRUE,
col.names = c("ID", "nd1", "nd2", "nd3", "nd4", "S"))
AvDGW <- vector(mode = "numeric",length = length(levels(subreg_list)))
